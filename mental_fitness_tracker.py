# -*- coding: utf-8 -*-
"""Mental Fitness Tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A56yWw54aKZIPrU3E7Ec4wjvTFVRbwK1

# New Section

IMPORTING LIBRARIES
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import seaborn as sb
import matplotlib.pyplot as plt
import plotly.express as px

"""# EXPLORATORY DATA ANALYSIS

LOAD AND PREAPARE DATA
"""

df1 = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/prevalence-by-mental-and-substance-use-disorder.csv")
df2 = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/mental-and-substance-use-as-share-of-disease.csv")

df1.head(15)

df2.head(15)

"""MERGING THE DATA"""

data = pd.merge(df1,df2)
data.head(10)

"""DATA CLEANING

"""

data.isnull().sum()

#Missing values in dataset
data.drop('Code',axis=1,inplace=True)

data.head(10)

data.size,data.shape

data = data.set_axis(['Country','Year','Schizophrenia','Bipolar disorder','Eating disorders','Anxiety disorders','Drug usage','depression','Alcohol','mental_fitness'], axis='columns')

from pandas.core.groupby.generic import DataFrameGroupBy
data.head(10)

"""# Visualization"""

plt.figure(figsize=(12,6))
# Convert 'object' columns to numeric using Label Encoding if needed
for col in data.select_dtypes(include=['object']).columns:
    data[col] = data[col].astype('category').cat.codes
# Calculate correlation on numeric columns only
num_data = data.select_dtypes(include=np.number)
sb.heatmap(num_data.corr(),annot=True,cmap='Blues')
plt.plot()

sb.pairplot(data,corner=True)
plt.show()

mean=data['mental_fitness'].mean()
mean

fig=px.pie(data,values='mental_fitness',names='Year')
fig.show()

fig=px.line(data, x="Year",y="mental_fitness",color="Country",markers=True,color_discrete_sequence=['red','blue'],template='plotly_dark')
fig.show

data.info()

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in data.columns:
  if data[i].dtype == 'object':
    data[i]=l.fit_transform(data[i])

data.shape

"""# Splitting the Data(6840,**10**)"""

X=data.drop('mental_fitness',axis=1)
y= data['mental_fitness']
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(X,y,test_size=20,random_state=2)

#Training (6840,10)
# 6840*80/100=5472
# 6840*20/100=1368
print("xtrain: ",xtrain.shape)
print("xtest: ",xtest.shape)
print("ytrain: ",ytrain.shape)
print("ytest: ",ytest.shape)

"""# MODEL TRAINING

LINEAR REGRESSION
"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr=LinearRegression()
lr.fit(xtrain,ytrain)
ytrain_pred = lr.predict(xtrain)
mse=mean_squared_error(ytrain, ytrain_pred)
rmse=(np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2=r2_score(ytrain,ytrain_pred)
print("The Linear regression modelpreformance for training set")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""RANDOM FOREST REGRESSION

"""

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()
rf.fit(xtrain,ytrain)
ytrain_pred = rf.predict(xtrain)
mse=mean_squared_error(ytrain, ytrain_pred)
rmse=(np.sqrt(mean_squared_error(ytrain,ytrain_pred)))
r2=r2_score(ytrain,ytrain_pred)
print("The Random Forest Regressor model preformance for testing set")
print('MSE is {}'.format(mse))
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))

"""CONCLUSION"""

print("welcome to Mental Fitness Tracker!\n Fill the deatails to check ypur mental fitness!")
Country = l.fit_transform([input('Enter your country name:')])[0]00
year= int(input("Enter the Year:"))
schi =(float(input("Enter your schizophrenia rate in %:")))
bipo_dis =(float(input("Enter your Bipolar disorder rate in %:")))
eat_dis =(float(input("Enter your Eating Disorder rate in %:")))
anx =(float(input("Enter your Anxiety rate in %:")))
drug_use =(float(input("Enter your Drug Usage rate per year %:")))
depr =(float(input("Enter your Depression rate in %:")))
alch =(float(input("Enter your Alcohol Consuming rate per year %:")))

prediction = rf.predict([[Country,year,schi,bipo_dis,eat_dis,anx,drug_use,depr,alch]])
print("Your Mental Fitness is {}%".format(prediction*10))

